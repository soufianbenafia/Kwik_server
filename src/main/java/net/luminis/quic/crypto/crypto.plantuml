@startuml

title __CRYPTO's Class Diagram__\n

  namespace net.luminis.quic {
    namespace crypto {
      class net.luminis.quic.crypto.Chacha20Keys {
          + Chacha20Keys()
          + aeadDecrypt()
          + aeadEncrypt()
          + createHeaderProtectionMask()
          + getHeaderProtectionCipher()
          + getWriteCipher()
          + getWriteKeySpec()
          # getKeyLength()
      }
    }
  }
  

  namespace net.luminis.quic {
    namespace crypto {
      class net.luminis.quic.crypto.ConnectionSecrets {
          {static} + STATIC_SALT_DRAFT_29 : byte[]
          {static} + STATIC_SALT_V1 : byte[]
          - clientRandom : byte[]
          - clientSecrets : Keys[]
          - serverSecrets : Keys[]
          - wiresharkSecretsFile : Path
          - writeSecretsToFile : boolean
          + ConnectionSecrets()
          + computeApplicationSecrets()
          + computeEarlySecrets()
          + computeHandshakeSecrets()
          + computeInitialKeys()
          + getClientSecrets()
          + getOwnSecrets()
          + getPeerSecrets()
          + getServerSecrets()
          + setClientRandom()
          - appendToFile()
          - createKeys()
      }
    }
  }
  

  namespace net.luminis.quic {
    namespace crypto {
      class net.luminis.quic.crypto.Keys {
          {static} + ISO_8859_1 : Charset
          # hp : byte[]
          # hpCipher : Cipher
          # newIV : byte[]
          # newKey : byte[]
          # newWriteKeySpec : SecretKeySpec
          # writeCipher : Cipher
          # writeIV : byte[]
          # writeKey : byte[]
          # writeKeySpec : SecretKeySpec
          - keyUpdateCounter : int
          - newApplicationTrafficSecret : byte[]
          - possibleKeyUpdateInProgresss : boolean
          - trafficSecret : byte[]
          + Keys()
          + Keys()
          + aeadDecrypt()
          + aeadEncrypt()
          + cancelKeyUpdateIfInProgress()
          + checkKeyPhase()
          + computeApplicationKeys()
          + computeHandshakeKeys()
          + computeKeyUpdate()
          + computeZeroRttKeys()
          + confirmKeyUpdateIfInProgress()
          + createHeaderProtectionMask()
          + getHeaderProtectionCipher()
          + getHp()
          + getKeyPhase()
          + getTrafficSecret()
          + getWriteCipher()
          + getWriteIV()
          + getWriteKey()
          + getWriteKeySpec()
          # getKeyLength()
          {static} ~ hkdfExpandLabel()
          ~ setPeerKeys()
          - checkPeerKeys()
          - computeKeys()
      }
    }
  }
  

  net.luminis.quic.crypto.Chacha20Keys -up-|> net.luminis.quic.crypto.Keys
  net.luminis.quic.crypto.ConnectionSecrets o-- net.luminis.quic.log.Logger : log
  net.luminis.quic.crypto.ConnectionSecrets o-- net.luminis.quic.Role : ownRole
  net.luminis.quic.crypto.ConnectionSecrets o-- net.luminis.quic.Version : quicVersion
  net.luminis.quic.crypto.ConnectionSecrets o-- net.luminis.tls.TlsConstants.CipherSuite : selectedCipherSuite
  net.luminis.quic.crypto.Keys o-- net.luminis.quic.log.Logger : log
  net.luminis.quic.crypto.Keys o-- net.luminis.quic.Role : nodeRole
  net.luminis.quic.crypto.Keys o-- net.luminis.quic.crypto.Keys : peerKeys
  net.luminis.quic.crypto.Keys o-- net.luminis.quic.Version : quicVersion


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
