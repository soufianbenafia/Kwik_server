@startuml

title __CID's Class Diagram__\n

  namespace net.luminis.quic {
    namespace cid {
      class net.luminis.quic.cid.ConnectionIdInfo {
          - connectionId : byte[]
          - sequenceNumber : int
          - statelessResetToken : byte[]
          + addStatelessResetToken()
          + getConnectionId()
          + getConnectionIdStatus()
          + getSequenceNumber()
          + getStatelessResetToken()
          + setStatus()
          ~ ConnectionIdInfo()
          ~ ConnectionIdInfo()
      }
    }
  }
  

  namespace net.luminis.quic {
    namespace cid {
      abstract class net.luminis.quic.cid.ConnectionIdRegistry {
          {static} + DEFAULT_CID_LENGTH : int
          # connectionIds : Map<Integer, ConnectionIdInfo>
          # currentConnectionId : byte[]
          - connectionIdLength : int
          - random : Random
          + ConnectionIdRegistry()
          + ConnectionIdRegistry()
          + getAll()
          + getConnectionIdlength()
          + getCurrent()
          + retireConnectionId()
          # currentIndex()
          # generateConnectionId()
      }
    }
  }
  

  namespace net.luminis.quic {
    namespace cid {
      enum ConnectionIdStatus {
        IN_USE
        NEW
        RETIRED
        USED
      }
    }
  }
  

  namespace net.luminis.quic {
    namespace cid {
      class net.luminis.quic.cid.DestinationConnectionIdRegistry {
          - notRetiredThreshold : int
          - originalConnectionId : byte[]
          - retrySourceConnectionId : byte[]
          + DestinationConnectionIdRegistry()
          + DestinationConnectionIdRegistry()
          + getOriginalConnectionId()
          + getRetrySourceConnectionId()
          + isStatelessResetToken()
          + registerNewConnectionId()
          + replaceInitialConnectionId()
          + retireAllBefore()
          + setInitialStatelessResetToken()
          + setRetrySourceConnectionId()
          + useNext()
      }
    }
  }
  

  namespace net.luminis.quic {
    namespace cid {
      class net.luminis.quic.cid.SourceConnectionIdRegistry {
          - activeConnectionIdLimit : int
          + SourceConnectionIdRegistry()
          + generateNew()
          + limitReached()
          + registerUsedConnectionId()
          + setActiveLimit()
      }
    }
  }
  

  net.luminis.quic.cid.ConnectionIdInfo o-- net.luminis.quic.cid.ConnectionIdStatus : connectionIdStatus
  net.luminis.quic.cid.ConnectionIdRegistry o-- net.luminis.quic.log.Logger : log
  net.luminis.quic.cid.DestinationConnectionIdRegistry -up-|> net.luminis.quic.cid.ConnectionIdRegistry
  net.luminis.quic.cid.SourceConnectionIdRegistry -up-|> net.luminis.quic.cid.ConnectionIdRegistry


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
