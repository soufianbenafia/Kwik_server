@startuml

title __CC's Class Diagram__\n

  namespace net.luminis.quic {
    namespace cc {
      class net.luminis.quic.cc.AbstractCongestionController {
          # bytesInFlight : long
          # congestionWindow : long
          {static} # initialWindowSize : int
          + AbstractCongestionController()
          + canSend()
          + discard()
          + getBytesInFlight()
          + getWindowSize()
          + registerAcked()
          + registerInFlight()
          + registerLost()
          + remainingCwnd()
          + reset()
          - checkBytesInFlight()
      }
    }
  }
  

  namespace net.luminis.quic {
    namespace cc {
      interface net.luminis.quic.cc.CongestionControlEventListener {
          {abstract} + bytesInFlightDecreased()
          {abstract} + bytesInFlightIncreased()
      }
    }
  }
  

  namespace net.luminis.quic {
    namespace cc {
      interface net.luminis.quic.cc.CongestionController {
          {abstract} + canSend()
          {abstract} + discard()
          {abstract} + getBytesInFlight()
          {abstract} + getWindowSize()
          {abstract} + registerAcked()
          {abstract} + registerInFlight()
          {abstract} + registerLost()
          {abstract} + remainingCwnd()
          {abstract} + reset()
      }
    }
  }
  

  namespace net.luminis.quic {
    namespace cc {
      class net.luminis.quic.cc.FixedWindowCongestionController {
          + FixedWindowCongestionController()
          + FixedWindowCongestionController()
      }
    }
  }
  

  namespace net.luminis.quic {
    namespace cc {
      class net.luminis.quic.cc.FixedWindowCongestionController.NoOpCongestionControlEventListener {
          + bytesInFlightDecreased()
          + bytesInFlightIncreased()
      }
    }
  }
  

  namespace net.luminis.quic {
    namespace cc {
      class net.luminis.quic.cc.NewRenoCongestionController {
          # kLossReductionFactor : int
          # kMaxDatagramSize : int
          # kMinimumWindow : int
          - congestionRecoveryStartTime : Instant
          - slowStartThreshold : long
          + NewRenoCongestionController()
          + getMode()
          + registerAcked()
          + registerInFlight()
          + registerLost()
          - fireCongestionEvent()
      }
    }
  }
  

  namespace net.luminis.quic {
    namespace cc {
      enum Mode {
        CongestionAvoidance
        SlowStart
      }
    }
  }
  

  net.luminis.quic.cc.AbstractCongestionController .up.|> net.luminis.quic.cc.CongestionController
  net.luminis.quic.cc.AbstractCongestionController o-- net.luminis.quic.cc.CongestionControlEventListener : eventListener
  net.luminis.quic.cc.AbstractCongestionController o-- net.luminis.quic.log.Logger : log
  net.luminis.quic.cc.FixedWindowCongestionController .up.|> net.luminis.quic.cc.CongestionController
  net.luminis.quic.cc.FixedWindowCongestionController -up-|> net.luminis.quic.cc.AbstractCongestionController
  net.luminis.quic.cc.FixedWindowCongestionController +-down- net.luminis.quic.cc.FixedWindowCongestionController.NoOpCongestionControlEventListener
  net.luminis.quic.cc.FixedWindowCongestionController.NoOpCongestionControlEventListener .up.|> net.luminis.quic.cc.CongestionControlEventListener
  net.luminis.quic.cc.NewRenoCongestionController .up.|> net.luminis.quic.cc.CongestionController
  net.luminis.quic.cc.NewRenoCongestionController -up-|> net.luminis.quic.cc.AbstractCongestionController
  net.luminis.quic.cc.NewRenoCongestionController +-down- net.luminis.quic.cc.NewRenoCongestionController.Mode


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
