@startuml

title __RUN's Class Diagram__\n

  namespace net.luminis.quic {
    namespace run {
      class net.luminis.quic.run.InteractiveShell {
          - alpn : String
          - commands : Map<String, Consumer<String>>
          - currentHttpGetResult : CompletableFuture<HttpResponse<Path>>
          - history : Map<String, String>
          - httpClient : HttpClient
          - running : boolean
          + InteractiveShell()
          + start()
          - changeUdpPort()
          - close()
          - connect()
          - createNewFile()
          - error()
          - help()
          - httpGet()
          - httpStop()
          - initParams()
          - newConnectionIds()
          - nextDestinationConnectionId()
          - printClientParams()
          - printConnectionIds()
          - printParams()
          - printServerParams()
          - printStatistics()
          - printSupportedParameters()
          - prompt()
          - quit()
          - repeatLastCommand()
          - retireConnectionId()
          - sendPing()
          - setClientParameter()
          - setClientParameter()
          - setScidLength()
          - setupCommands()
          - toInt()
          - toLong()
          - toString()
          - unknown()
          - updateKeys()
      }
    }
  }
  

  namespace net.luminis.quic {
    namespace run {
      class net.luminis.quic.run.InteropRunner {
          {static} + TC_0RTT : String
          {static} + TC_KEYUPDATE : String
          {static} + TC_MULTI : String
          {static} + TC_RESUMPTION : String
          {static} + TC_TRANSFER : String
          {static} + TESTCASES : List
          {static} - logger : Logger
          {static} - outputDir : File
          {static} + main()
          {static} ~ timeNow()
          {static} - http09Request()
          {static} - http09RequestWithZeroRttStream()
          {static} - testKeyUpdate()
          {static} - testMultiConnect()
          {static} - testResumption()
          {static} - testTransfer()
          {static} - testZeroRtt()
          {static} - transfer()
      }
    }
  }
  

  namespace net.luminis.quic {
    namespace run {
      class net.luminis.quic.run.KwikCli {
          {static} - DEFAULT_LOG_ARGS : String
          {static} - cmdLineOptions : Options
          {static} + main()
          {static} + usage()
          {static} ~ createHttpClient()
          {static} - loadECKey()
          {static} - loadHttp3ClientClass()
          {static} - loadRSAKey()
          {static} - readCertificate()
          {static} - readKey()
          {static} - storeNewSessionTicket()
          {static} - storeNewSessionTickets()
          {static} - storeServerCertificates()
      }
    }
  }
  

  namespace net.luminis.quic {
    namespace run {
      enum HttpVersion {
        HTTP09
        HTTP3
      }
    }
  }
  

  namespace net.luminis.quic {
    namespace run {
      class net.luminis.quic.run.KwikVersion {
          {static} - version : String
          {static} + getVersion()
          {static} - extractVersion()
      }
    }
  }
  

  namespace net.luminis.quic {
    namespace run {
      class net.luminis.quic.run.Sample {
          {static} + main()
      }
    }
  }
  

  namespace net.luminis.quic {
    namespace run {
      class net.luminis.quic.run.SendUnlimited {
          {static} + main()
      }
    }
  }
  

  net.luminis.quic.run.InteractiveShell o-- net.luminis.quic.QuicClientConnectionImpl.Builder : builder
  net.luminis.quic.run.InteractiveShell o-- net.luminis.quic.run.KwikCli.HttpVersion : httpVersion
  net.luminis.quic.run.InteractiveShell o-- net.luminis.quic.TransportParameters : params
  net.luminis.quic.run.InteractiveShell o-- net.luminis.quic.QuicClientConnectionImpl : quicConnection
  net.luminis.quic.run.InteropRunner -up-|> net.luminis.quic.run.KwikCli
  net.luminis.quic.run.KwikCli +-down- net.luminis.quic.run.KwikCli.HttpVersion


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
