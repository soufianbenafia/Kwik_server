apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'

sourceCompatibility = 11
targetCompatibility = 11

repositories {
    mavenCentral()
}

dependencies {
    implementation project(':agent15')

    // https://mvnrepository.com/artifact/at.favre.lib/hkdf
    implementation group: 'at.favre.lib', name: 'hkdf', version: '1.0.1'

    // https://mvnrepository.com/artifact/commons-cli/commons-cli
    implementation group: 'commons-cli', name: 'commons-cli', version: '1.4'

    implementation 'org.glassfish:javax.json:1.1.4'

    implementation group: 'com.opencsv', name: 'opencsv', version: '5.2'
    testImplementation('org.junit.jupiter:junit-jupiter-api:5.3.2')
    testImplementation('org.junit.jupiter:junit-jupiter-params:5.3.2')
    testImplementation('org.junit.jupiter:junit-jupiter-engine:5.3.2')
    testImplementation("org.mockito:mockito-core:3.2.4")
    testImplementation("org.assertj:assertj-core:3.14.0")
}

sourceSets {
    main {
        resources {
            srcDir "${buildDir}/generated"
        }
    }
}

test {
    useJUnitPlatform()
    testLogging {
        showStandardStreams = true
        events "passed", "skipped", "failed"
        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            }
        }
    }


    afterSuite { desc, result ->
        if (!desc.parent) { // will match the outermost suite
            println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
        }
    }
}

jar {
    manifest {
        attributes 'Main-Class': 'net.luminis.quic.run.KwikCli'
    }

    doFirst {
        from {
           configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
        }
        exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
    }
}

task determineVersion {
    doLast {
        def proc = "git describe --always --dirty".execute()
        proc.waitFor()
        if (proc.exitValue()) {
            logger.quiet("Building development version.")
        } else {
            def versionTag = proc.in.readLines()[0]
            logger.quiet("Building version ${versionTag}.")

            ext.versionDir = new File("${buildDir}", "generated/net/luminis/quic")
            versionDir.mkdirs()

            new File(versionDir, "version.properties").text = versionTag
        }
    }
}

compileJava.dependsOn determineVersion
